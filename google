##!/bin/bash

browser="google-chrome"
bookmarks=~/.config/google-chrome/Default/Bookmarks
logfile=~/tmp/google-script.log
mkdir -p ~/tmp/
touch $logfile
mode="d"
DEBUG=true
#mobile
exec 5>> debug_output.txt
BASH_XTRACEFD="5"
PS4='$LINENO: '
set -x
bookmarks=./Bookmarks
usage="\
Usage: $(basename $0) [OPTIONS] URL
Browser wrapper script. With no options given, google searches the URL string.
  -d URL        Google search URL (default)
  -l URL        Google lucky search URL
  -f FILE       Open FILE with google-chrome
  -b BOOKMARK   Search for bookmark instead of URL
  -w URL        Use URL as address instead of google searching
  -c            Curl the url instead
  -n            Start in a new window
  -o OPTIONS    Pass in OPTIONS to google-chrome. Quote for multiple arguments
  -v            Print the full url to console before opening
  -D            Run with '--disable-web-security' flag (development)
  -h            Show this menu

  deprecated:
  -B BROWSER    Set browser to BROWSER (default google-chrome)
  -M BOOKMARKS  Use file BOOKMARKS to search for bookmarks (default:
                ~/.config/google-chrome.Default/Bookmarks)
"

function argsUntilNextValidOpt {
  opts=-[dlfbwcnovDhBM]
  n=0
  str=
  shift
  while ! [[ $1 =~ $opts ]] && [ ! -z $1 ]; do
    str=$str" $1"
    shift
    ((n++))
  done
  ((n++))
  echo $n "$str"
}

# could do optStack too
curlmode=false
silent=false
options=
declare -a urlStack
declare -a optStack
stackIndex=0
verbose=false

if [ $# == 0 ]; then
  urlStack[$stackIndex]='google.ca/'
  ((stackIndex++))
fi

while [ "${1:0:1}" == "-" ]; do
  arg="$1"
  for ((i = 1; i < ${#arg}; i++)); do
    case ${arg:$i:1} in
      l | b | w | d)
        mode=${arg:$i:1}
        res=($(argsUntilNextValidOpt $*))
        shift ${res[0]}
        case $mode in
          l)
            urlStack[$stackIndex]="google.ca/search?btnI=1&q=""${res[*]:1}";;
          b)
            line=$(egrep -A 4 "\"name\":\ \"${res[*]:1}\"" "$bookmarks" |grep -o "\"url\": \".*\"")
            url=$(echo $line |cut -d '"' -f4)
            if [ "$url" == "" ]; then
              echo Could not find bookmark \'${res[*]:1}\'
              exit 1
            fi
            urlStack[$stackIndex]=$url
          ;;
          w) urlStack[$stackIndex]="${res[*]:1}";;
          d) urlStack[$stackIndex]="google.ca/#q=${res[*]:1}";;
        esac
        ((stackIndex++))
      ;;
      f)
        urlStack[$stackIndex]="$2"
        ((stackIndex++))
        shift
        [[ ${#arg} == 2 ]] && shift
      ;;

      D)
        optStack[$stackIndex]="--disable-web-security ${optStack[$stackIndex]}"
        shift
        if [[ ${#arg} == 2 ]]; then
          shift
        fi
      ;;
      n)
        optStack[$stackIndex]="--new-window ${optStack[$stackIndex]}"
        shift
        if [[ ${#arg} == 2 ]]; then
          shift
        fi
      ;;
      o)
        optStack[$stackIndex]="$2 ${optStack[$stackIndex]}"
        shift
        if [[ ${#arg} == 2 ]]; then
          shift
        fi
      ;;

      c) curlmode=true && [[ ${#arg} == 2 ]] && shift;;
      B) browser="$2" && shift && [[ ${#arg} == 2 ]] && shift;;
      M) bookmarks="$2" && shift && [[ ${#arg} == 2 ]] && shift;;
      h) echo "$usage" && exit 1;;
      s) silent=true && [[ ${#arg} == 2 ]] && shift;;
      v) verbose=true && [[ ${#arg} == 2 ]] && shift;;
      *) echo "Unknow option \`$1'. Try $(basename $0) -h for more info" && exit 1;;
    esac
  done
done

# Still url to parse
if [ ! -z $1 ]; then
  urlStack[$stackIndex]='google.ca/#q='"$*"
  ((stackIndex++))
# Options given but no url
elif [ "$stackIndex" -eq 0 ] && [ ! -z "$optStack[$stackIndex]" ]; then
  ((stackIndex++))
fi

if $curlmode; then
  exit 1
  echo "Opening: $url"
  for ((i = 0; i < stackIndex; i++)); do
    ${verbose} && echo "curl ${urlStack[$i]}"
    ${DEBUG} && echo "curl ${urlStack[$i]}" || \
    curl "${urlStack[$i]}"
  done
else
  for ((i = 0; i < stackIndex; i++)); do
    ${verbose} && echo "$browser ${optStack[$i]} ${urlStack[$i]}"
    ${DEBUG} && echo "$browser" "${optStack[$i]}" "${urlStack[$i]}" || \
    "$browser" "${optStack[$i]}" "${urlStack[$i]}" &>$logfile &
  done
fi
