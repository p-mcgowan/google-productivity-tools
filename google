#!/bin/bash

browser="google-chrome"
bookmarks=~/.config/google-chrome/Default/Bookmarks
logfile=~/tmp/google-script.log
mkdir -p ~/tmp/
touch $logfile
mode="d"
DEBUG=true
homepage='google.ca'

usage="\
Usage: $(basename $0) [OPTIONS] URL
Browser wrapper script. With no options given, google searches the URL string.
  -s URL        Google search URL (default when only 1 url specified)
  -l URL        Google lucky search URL
  -f FILE       Open FILE with google-chrome
  -b BOOKMARK   Search for bookmark instead of URL
  -w URL        Use URL as address instead of google searching
  -n            Start in a new window
  -o OPTIONS    Pass in OPTIONS to browser. Quote for multiple arguments
  -B BROWSER    Set browser to BROWSER (default google-chrome)
  -M BOOKMARKS  Use file BOOKMARKS to search for bookmarks (default:
                ~/.config/google-chrome.Default/Bookmarks). Note: format expects
                google-style bookmarks, so this option may not work for other
                browsers.
  -c            Curl the url instead.
  -v            Print the full url to console before opening.
  -d            Print the full url to console instea of opening.
  -D            Run with '--disable-web-security' flag (development).
  -h            Show this menu"
rm -f debug.log
log() {
  return
  echo '  => '$@ >&2
}

argsUntilNextOpt() {
  opts=-[slfbwcnovDhBM]
  n=0
  str=
  shift
  for i in "$@"; do
    if [[ "$i" =~ ^$opts ]] || [ -z "$i" ]; then
      break
    else
      str=$str" $i"
      ((n++))
    fi
  done
  ((n++))
  echo "$n $str"
}

curlmode=false
silent=false
options=
declare -a urlStack
declare -a optStack
stackIndex=0
verbose=false

if [ $# == 0 ]; then
  urlStack[$stackIndex]="$homepage"
  ((stackIndex++))
fi

while [ "${1:0:1}" == "-" ]; do
  arg="$1"
  for ((i = 1; i < ${#arg}; i++)); do
    case ${arg:$i:1} in
      l | b | w | s)
        mode=${arg:$i:1}
        res=($(argsUntilNextOpt "$@"))
        shift ${res[0]}
        str="${res[@]:1}"

        case $mode in
          l)
            urlStack[$stackIndex]="${homepage}/search?btnI=1&q=""${str}";;
          b)
            line=$(egrep -A 4 "\"name\":\ \"${str}\"" "$bookmarks" |grep -o "\"url\": \".*\"")
            url=$(echo $line |cut -d '"' -f4)
            if [ "$url" == "" ]; then
              echo Could not find bookmark \'${str}\'
              exit 1
            fi
            urlStack[$stackIndex]=$url
          ;;
          w) urlStack[$stackIndex]="${str}";;
          s) urlStack[$stackIndex]="${homepage}/search?q=${str}";;
        esac
        ((stackIndex++))
      ;;
      f)
        urlStack[$stackIndex]="$2"
        ((stackIndex++))
        shift && [[ ${#arg} == 2 ]] && shift
      ;;

      D)
        optStack[$stackIndex]="${optStack[$stackIndex]} --disable-web-security"
        [[ ${#arg} == 2 ]] && shift
      ;;
      n)
        optStack[$stackIndex]="${optStack[$stackIndex]} --new-window"
        [[ ${#arg} == 2 ]] && shift
      ;;
      o)
        optStack[$stackIndex]="${optStack[$stackIndex]} $2"
        shift && [[ ${#arg} == 2 ]] && shift
      ;;
      c)
        curlmode=true
        [[ ${#arg} == 2 ]] && shift
      ;;
      B)
        browser="$2"
        shift && [[ ${#arg} == 2 ]] && shift
      ;;
      M)
        bookmarks="${arguments[1]}"
        shift && [[ ${#arg} == 2 ]] && shift
      ;;
      h)
        echo "$usage"
        exit 1
      ;;
      v)
        verbose=true
        [[ ${#arg} == 2 ]] && shift
      ;;
      d) debug=true;;
      *) echo "Unknow option \`$1'. Try $(basename $0) -h for more info" && exit 1;;
    esac
  done
done

# Still url to parse
if [ ! -z "$*" ]; then
  urlStack[$stackIndex]="${homepage}/search?q=$*"
  ((stackIndex++))
# Options given but no url
elif [ "$stackIndex" -eq 0 ] && [ ! -z "$optStack[$stackIndex]" ]; then
  ((stackIndex++))
fi

if $curlmode; then
  # echo "Opening: $url"
  for ((i = 0; i < stackIndex; i++)); do
    ${verbose} && echo "curl${optStack[$i]} ${urlStack[$i]}"
    ${DEBUG} && echo "curl${optStack[$i]} ${urlStack[$i]}" || \
    curl"${optStack[$i]}" "${urlStack[$i]}"
  done
else
  for ((i = 0; i < stackIndex; i++)); do
    ${verbose} && echo "$browser${optStack[$i]} ${urlStack[$i]}"
    ${DEBUG} && echo "$browser""${optStack[$i]}" "${urlStack[$i]}" || \
    "$browser""${optStack[$i]}" "${urlStack[$i]}" &>$logfile &
  done
fi
